generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  DEFAULT
  ADMIN
}

enum LeaseStatus {
  EXPIRED
  EXPIRING
  UP_TO_DATE
}

enum PropertyStatus {
  OCCUPIED
  AVAILABLE
}

enum DocumentType {
  TITLE_DEED
  REGISTRATION
  OTHER
}

model Agency {
  id                  Int   @id @default(autoincrement())
  trade_name          String
  legal_name          String
  cnpj                String   @db.VarChar(18)
  state_registration  Int
  municipal_registration Int
  license_number      String   @db.VarChar(20)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  contacts            AgencyContact[]
  addresses           AgencyAddress[]
}

model AgencyContact {
  id         Int     @id @default(autoincrement())
  contact_id Int
  agency_id  Int

  contact    Contact @relation(fields: [contact_id], references: [id])
  agency     Agency  @relation(fields: [agency_id], references: [id])
}

model AgencyAddress {
  id         Int     @id @default(autoincrement())
  address_id Int
  agency_id  Int

  address    Address @relation(fields: [address_id], references: [id])
  agency     Agency  @relation(fields: [agency_id], references: [id])
}

model Property {
  id              Int         @id @default(autoincrement())
  owner_id        Int
  type_id         Int
  title           String
  bedrooms        Int
  bathrooms       Int
  half_bathrooms  Int
  garage_spaces   Int
  area_total      Float
  area_built      Float
  frontage        Float
  furnished       Boolean
  floor_number    Int
  tax_registration String    @db.VarChar(20)
  notes           String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  owner           Owner      @relation(fields: [owner_id], references: [id])
  type            PropertyType @relation(fields: [type_id], references: [id])
  documents       Document[]
  addresses       PropertyAddress[]
  favorites       Favorite[]
  leases          Lease[]   
  values          PropertyValue[]
}


model PropertyAddress {
  id          Int       @id @default(autoincrement())
  address_id  Int
  property_id Int

  address     Address   @relation(fields: [address_id], references: [id])
  property    Property  @relation(fields: [property_id], references: [id])
}

model Document {
  id          Int         @id @default(autoincrement())
  property_id Int
  file_path   String
  file_type   String
  description String?
  type        DocumentType
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  created_by  Int        
  user        User        @relation(fields: [created_by], references: [id])

  property    Property    @relation(fields: [property_id], references: [id])
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  birth_date  DateTime
  gender      Gender
  role        Role       @default(ADMIN)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  favorites   Favorite[]
  documents   Document[]
}

model Address {
  id         Int       @id @default(autoincrement())
  zip_code   String    @db.VarChar(10)
  street     String
  number     Int
  district   String    @db.VarChar(100)
  city       String    @db.VarChar(100)
  state      String    @db.VarChar(50)
  country    String    @db.VarChar(50)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  propertyAddresses PropertyAddress[]
  agencyAddresses   AgencyAddress[]
  ownerAddresses    OwnerAddress[]
}

model Contact {
  id         Int       @id @default(autoincrement())
  phone      String    @db.VarChar(20)
  email      String
  whatsapp   Boolean
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  agencyContacts    AgencyContact[]
  ownerContacts     OwnerContact[]
  tenantContacts    TenantContact[]
}

model Favorite {
  id         Int        @id @default(autoincrement())
  user_id    Int
  property_id Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  property   Property  @relation(fields: [property_id], references: [id])
}

model Owner {
  id                    Int         @id @default(autoincrement())
  name                  String
  internal_code         Int
  occupation            String
  marital_status        String
  cnpj                  String     @db.VarChar(20)
  cpf                   String     @db.VarChar(14)
  state_registration    Int
  municipal_registration Int

  properties            Property[]
  leases                Lease[]
  addresses             OwnerAddress[]
  contacts              OwnerContact[]
}

model OwnerAddress {
  id          Int       @id @default(autoincrement())
  address_id  Int
  owner_id    Int

  address     Address  @relation(fields: [address_id], references: [id])
  owner       Owner    @relation(fields: [owner_id], references: [id])
}

model OwnerContact {
  id          Int       @id @default(autoincrement())
  contact_id  Int
  owner_id    Int

  contact     Contact  @relation(fields: [contact_id], references: [id])
  owner       Owner    @relation(fields: [owner_id], references: [id])
}

model Tenant {
  id           Int          @id @default(autoincrement())
  name         String
  internal_code Int
  occupation   String

  leases       Lease[]
  contacts     TenantContact[]
}

model TenantContact {
  id          Int       @id @default(autoincrement())
  contact_id  Int
  tenant_id   Int

  contact     Contact  @relation(fields: [contact_id], references: [id])
  tenant      Tenant   @relation(fields: [tenant_id], references: [id])
}

model Lease {
  id                  Int         @id @default(autoincrement())
  property_id         Int
  type_id             Int
  owner_id            Int
  tenant_id           Int
  contract_number     Int
  start_date          DateTime
  end_date            DateTime
  status              LeaseStatus
  rent_amount         Decimal     @db.Decimal(10,2)
  condo_fee           Decimal     @db.Decimal(10,2)
  property_tax        Decimal     @db.Decimal(10,2)
  extra_charges       Decimal     @db.Decimal(10,2)
  agency_commission   String      @db.VarChar(10)
  commission_amount   Decimal     @db.Decimal(10,2)
  rent_due_date       DateTime
  tax_due_date        DateTime
  condo_due_date      DateTime

  property            Property   @relation(fields: [property_id], references: [id])
  type                PropertyType @relation(fields: [type_id], references: [id])
  owner               Owner      @relation(fields: [owner_id], references: [id])
  tenant              Tenant     @relation(fields: [tenant_id], references: [id])
}
model PropertyValue {
  id                 Int         @id @default(autoincrement())
  property_id        Int
  purchase_value     Decimal     @db.Decimal(10,2)
  purchase_date      DateTime
  sale_value         Decimal     @db.Decimal(10,2)
  sale_date          DateTime
  rental_value       Decimal     @db.Decimal(10,2)
  property_tax       Decimal     @db.Decimal(10,2)
  condo_fee          Decimal     @db.Decimal(10,2)
  extra_charges      Decimal     @db.Decimal(10,2)
  total              Decimal     @db.Decimal(10,2)
  current_status     PropertyStatus
  lease_rules        String      @db.VarChar(100)
  sale_rules         String      @db.VarChar(100)
  notes              String      @db.VarChar(100)

  property           Property    @relation(fields: [property_id], references: [id])
}

model PropertyType {
  id          Int        @id @default(autoincrement())
  description String

  properties  Property[]
  leases      Lease[]
}

